# NOTE: Please keep .spectral.yaml in sync
rules:
  apimatic-security-defined:
    description: "Apimatic: It is recommended to define at least one authentication scheme globally using the securitySchemes property in the components section and use it globally to authenticate all the endpoints or use it for specific endpoints."
    message: "'security' must be defined and not empty"
    given: "$"
    severity: warn
    then:
      field: "security"
      function: schema
      functionOptions:
        schema:
          type: array
          items:
            type: object
          minItems: 1
  apimatic-operationId-max-length:
    description: "Apimatic: Longer content can lead to issues in the code generation process. It's best to keep the length to a maximum of 50 characters, wherever possible."
    message: "{{property}} must be shorter than 50 characters"
    given: "$.paths..operationId"
    severity: info
    type: validation
    then:
      function: length
      functionOptions:
        max: 50
  apimatic-parameter-name-max-length:
    description: "Apimatic: Longer content can lead to issues in the code generation process. It's best to keep the length to a maximum of 50 characters, wherever possible."
    message: "{{property}} must be shorter than 50 characters"
    given: "$.paths..parameters[*].name"
    severity: info
    type: validation
    then:
      function: length
      functionOptions:
        max: 50
  apimatic-header-name-max-length:
    description: "Apimatic: Longer content can lead to issues in the code generation process. It's best to keep the length to a maximum of 50 characters, wherever possible."
    message: "{{property}} must be shorter than 50 characters"
    given: "$.paths..responses..headers[*]~"
    severity: info
    type: validation
    then:
      function: length
      functionOptions:
        max: 50
  apimatic-component-name-max-length:
    description: "Apimatic: Longer content can lead to issues in the code generation process. It's best to keep the length to a maximum of 50 characters, wherever possible."
    message: "{{property}} must be shorter than 50 characters"
    given: "$.components.[schemas,requestBodies,responses,parameters,examples,headers,securitySchemes][*]~"
    severity: info
    type: validation
    then:
      function: length
      functionOptions:
        max: 50
  apimatic-no-inline-response-schema:
    given: $.paths..responses..content..schema
    description: "Apimatic: In general, inline schemas are not encouraged in code generators and API portal generators since their names are inferred from the parent node in which they are defined inline."
    message: "Response schema: {{path}} should be moved to components/schemas and referenced"
    severity: info
    resolved: false
    then:
      field: "$ref"
      function: truthy
  apimatic-no-inline-parameter-schema:
    description: "Apimatic: In general, inline schemas are not encouraged in code generators and API portal generators since their names are inferred from the parent node in which they are defined inline."
    message: "Parameter schema: {{path}} should be moved to components/schemas and referenced"
    given: $.paths..parameters[*].schema
    severity: info
    resolved: false
    then:
      field: "$ref"
      function: truthy
  apimatic-no-inline-request-body-schema:
    description: "Apimatic: In general, inline schemas are not encouraged in code generators and API portal generators since their names are inferred from the parent node in which they are defined inline."
    message: "Request Body schema: {{path}} should be moved to components/schemas and referenced"
    given: $.paths..requestBody.content..schema
    severity: info
    resolved: false
    then:
      field: "$ref"
      function: truthy
  redocly-operation-summary:
    message: Operation should have a summary
    description: "Operation summaries are used to generate API docs. Redocly uses the summary as the header for the operation, as well as the sidebar navigation text. See https://redocly.com/docs/cli/rules/operation-summary/"
    severity: warn
    given: "$.paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]"
    then:
      - field: "summary"
        function: truthy
  redocly-components-invalid-map-name:
    message: All component names MUST consist of the following characters `A..Z a..z 0..9 . _ -`
    description: "All components MUST use keys that match the regular expression: ^[a-zA-Z0-9.-_]+$ See https://redocly.com/docs/cli/rules/spec-components-invalid-map-name/"
    severity: error
    given:
      - "$.components.schemas[*]~"
      - "$.components.parameters[*]~"
      - "$.components.securitySchemes[*]~"
      - "$.components.requestBodies[*]~"
      - "$.components.responses[*]~"
      - "$.components.headers[*]~"
      - "$.components.examples[*]~"
      - "$.components.links[*]~"
      - "$.components.callbacks[*]~"
    then:
      function: pattern
      functionOptions:
        match: ^[a-zA-Z0-9._-]+$
  redocly-no-server-variables-empty-enum:
    message: "Server variables defined, but no enum of options provided"
    description: "If you use server variables, there are generally two kinds: tenant-driven and environment-driven. In the case of environment-driven variables, you may want to predefine all of the possible values. See https://redocly.com/docs/cli/rules/no-server-variables-empty-enum/"
    severity: warn
    given: "$.servers[*].variables[*]"
    then:
      field: "enum"
      function: defined
  redocly-no-undefined-server-variable:
    message: "Variable was declared in server URL but not documented"
    description: "Document all declared server variables to make it easier to consume the API. See https://redocly.com/docs/cli/rules/no-undefined-server-variable/"
    severity: warn
    given: "$.servers[?(@.url.match(/({)/))]"
    then:
      field: "variables"
      function: defined
  speakeasy-parameter-name-nonempty:
    message: "Parameter has an empty name"
    description: "All parameters must have a non-empty name. See https://www.speakeasyapi.dev/docs/openapi/validation"
    severity: warn
    given: "$.paths..parameters..name"
    then:
      function: length
      functionOptions:
        min: 1
  # TODO: Integrate and benchmark custom JS rules
  # speakeasy-duplicate-tag:
  #   message: "Duplicate tags detected"
  #   description: "Tag names must be unique. See https://www.speakeasyapi.dev/docs/openapi/validation"
  #   severity: warn
  #   given: "$.tags"
  #   then:
  #     function: "checkUniqueTags"
  # speakeasy-validate-requests:
  #   message: "Request body content type is not a valid mime type"
  #   description: "Request body content type must be a valid mime type. See https://www.speakeasyapi.dev/docs/openapi/validation"
  #   severity: warn
  #   given: "$.paths..requestBody.content"
  #   then:
  #     function: "validateContentMimeType"
  # speakeasy-validate-responses:
  #   message: "Response content type is not a valid mime type"
  #   description: "Responses content type must be a valid mime type. See https://www.speakeasyapi.dev/docs/openapi/validation"
  #   severity: warn
  #   given: "$.paths..responses..content"
  #   then:
  #     function: "validateContentMimeType"

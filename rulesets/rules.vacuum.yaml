extends: [[spectral:oas, all]]
rules:
  paths-kebab-case: false
  operation-4xx-response: info
  operation-success-response: warn
  operation-operationId-valid-in-url: warn
  operation-operationId: warn
  contact-properties: info
  info-contact: info
  info-license: info
  license-url: info
  tag-description: info
  operation-tags: hint
  openapi-tags: warn
  operation-singular-tag: false
  # The alphabetical rule seems to fail on Box
  openapi-tags-alphabetical: false
  # Noisy and unnecessary
  description-duplication: false
  # Not a big deal
  oas3-host-trailing-slash: false
  owasp:api1:2019-no-numeric-ids:
    description: "OWASP API1:2019 - Use random IDs that cannot be guessed. UUIDs are preferred."
    severity: warn
    given: '$.paths..parameters[*][?(@property === "name" && (@ === "id" || @.match(/(_id|Id|-id)$/)))]^.schema'
    then:
      function: schema
      functionOptions:
        schema:
          type: "object"
          not:
            properties:
              type:
                const: "integer"
          properties:
            format:
              const: "uuid"
  owasp:api2:2019-no-http-basic:
    message: "Security scheme uses HTTP Basic. Use a more secure authentication method, like OAuth 2.0."
    description: "Basic authentication credentials transported over network are more susceptible to interception than other forms of authentication, and as they are not encrypted it means passwords and tokens are more easily leaked."
    severity: warn
    given: "$.components.securitySchemes[*]"
    then:
      field: "scheme"
      function: pattern
      functionOptions:
        notMatch: "basic"
  owasp:api3:2019-define-error-responses-401:
    message: "Operation is missing {{property}}."
    description: "OWASP API Security recommends defining schemas for all responses, even errors. The 401 describes what happens when a request is unauthorized, so its important to define this not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces."
    severity: warn
    given: "$.paths..responses"
    then:
      - field: "401"
        function: truthy
      - field: "401.content"
        function: truthy
  owasp:api3:2019-define-error-responses-500:
    message: "Operation is missing {{property}}."
    description: "OWASP API Security recommends defining schemas for all responses, even errors. The 500 describes what happens when a request fails with an internal server error, so its important to define this not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces."
    severity: warn
    given: "$.paths..responses"
    then:
      - field: "500"
        function: truthy
      - field: "500.content"
        function: truthy
  owasp:api4:2019-rate-limit:
    message: "All 2XX and 4XX responses should define rate limiting headers."
    description: "Define proper rate limiting to avoid attackers overloading the API. There are many ways to implement rate-limiting, but most of them involve using HTTP headers, and there are two popular ways to do that:\n\nIETF Draft HTTP RateLimit Headers:. https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/\n\nCustomer headers like X-Rate-Limit-Limit (Twitter: https://developer.twitter.com/en/docs/twitter-api/rate-limits) or X-RateLimit-Limit (GitHub: https://docs.github.com/en/rest/overview/resources-in-the-rest-api)"
    severity: warn
    formats: [oas3]
    given: "$.paths[*]..responses[?(@property.match(/^(2|4)/))]"
    then:
      field: "headers"
      function: schema
      functionOptions:
        schema:
          type: "object"
          oneOf:
            - required: ["RateLimit-Limit", "RateLimit-Reset"]
            - required: ["X-RateLimit-Limit"]
            - required: ["X-Rate-Limit-Limit"]
  owasp:api4:2019-rate-limit-retry-after:
    message: "A 429 response should define a Retry-After header."
    description: "Define proper rate limiting to avoid attackers overloading the API. Part of that involves setting a Retry-After header so well meaning consumers are not polling and potentially exacerbating problems."
    severity: warn
    formats: [oas3]
    given: "$..responses[429].headers"
    then:
      field: "Retry-After"
      function: defined
  owasp:api4:2019-rate-limit-responses-429:
    message: "Operation is missing rate limiting response in {{property}}."
    description: "OWASP API Security recommends defining schemas for all responses, even errors. A HTTP 429 response signals the API client is making too many requests, and will supply information about when to retry so that the client can back off calmly without everything breaking. Defining this response is important not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces. It also ensures your API/framework/gateway actually has rate limiting set up."
    severity: warn
    given: "$.paths..responses"
    then:
      - field: "429"
        function: truthy
      - field: "429.content"
        function: truthy
  owasp:api7:2019-security-hosts-https-oas3:
    message: "Server URLs MUST begin https://, and no other protocol is permitted."
    description: "All server interactions MUST use the https protocol, meaning server URLs should begin `https://`.\n\nLearn more about the importance of TLS (over SSL) here: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html"
    severity: error
    formats: [oas3]
    given: "$.servers..url"
    then:
      function: pattern
      functionOptions:
        match: "/^https:/"
